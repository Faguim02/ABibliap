// Generated by Dagger (https://dagger.dev).
package com.guim.abibliap.di;

import com.guim.abibliap.domain.repository.RemoteDataRepository;
import com.guim.abibliap.domain.use_case.UseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AppModule_ProvideUseCaseFactory implements Factory<UseCase> {
  private final Provider<RemoteDataRepository> repositoryProvider;

  public AppModule_ProvideUseCaseFactory(Provider<RemoteDataRepository> repositoryProvider) {
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public UseCase get() {
    return provideUseCase(repositoryProvider.get());
  }

  public static AppModule_ProvideUseCaseFactory create(
      Provider<RemoteDataRepository> repositoryProvider) {
    return new AppModule_ProvideUseCaseFactory(repositoryProvider);
  }

  public static UseCase provideUseCase(RemoteDataRepository repository) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideUseCase(repository));
  }
}
