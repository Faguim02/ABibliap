// Generated by Dagger (https://dagger.dev).
package com.guim.abibliap.di;

import com.guim.abibliap.data.BibleApi;
import com.guim.abibliap.domain.repository.RemoteDataRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AppModule_ProvideRepositoryFactory implements Factory<RemoteDataRepository> {
  private final Provider<BibleApi> apiProvider;

  public AppModule_ProvideRepositoryFactory(Provider<BibleApi> apiProvider) {
    this.apiProvider = apiProvider;
  }

  @Override
  public RemoteDataRepository get() {
    return provideRepository(apiProvider.get());
  }

  public static AppModule_ProvideRepositoryFactory create(Provider<BibleApi> apiProvider) {
    return new AppModule_ProvideRepositoryFactory(apiProvider);
  }

  public static RemoteDataRepository provideRepository(BibleApi api) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideRepository(api));
  }
}
